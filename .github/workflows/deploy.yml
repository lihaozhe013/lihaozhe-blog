name: Deploy Hugo site to GitHub Pages

on:
  push:
    branches:
      - main
      - master
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Detect Hugo Modules (go.mod)
        id: detect_mod
        run: |
          if [ -f go.mod ]; then
            echo "has_mod=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_mod=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Go (for Hugo Modules)
        if: steps.detect_mod.outputs.has_mod == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Setup Hugo (extended)
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "latest"
          extended: true

      - name: Compute baseURL
        id: baseurl
        shell: bash
        run: |
          REPO="${GITHUB_REPOSITORY#*/}"
          OWNER="${{ github.repository_owner }}"
          BASE_URL=""
          if [ -f ./static/CNAME ]; then
            DOMAIN="$(tr -d '\n\r ' < ./static/CNAME)"
            BASE_URL="https://${DOMAIN}/"
          elif [ "$REPO" = "${OWNER}.github.io" ]; then
            BASE_URL="https://${OWNER}.github.io/"
          else
            BASE_URL="https://${OWNER}.github.io/${REPO}/"
          fi
          echo "base_url=${BASE_URL}" >> "$GITHUB_OUTPUT"
          echo "Using baseURL: ${BASE_URL}"

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo --gc --minify --enableGitInfo --baseURL "${{ steps.baseurl.outputs.base_url }}"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup:
    if: github.event_name != 'pull_request' && success()
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Delete previous workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100
              });
              
              // 保留最新的3次运行, 删除其余的
              const runsToDelete = runs.workflow_runs.slice(3);
              
              for (const run of runsToDelete) {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  console.log(`Deleted workflow run: ${run.id}`);
                } catch (error) {
                  console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
                }
              }
            }

      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // 保留最新的3个artifact, 删除其余的
            const artifactsToDelete = artifacts.artifacts.slice(3);
            
            for (const artifact of artifactsToDelete) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name} (${artifact.id})`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.id}: ${error.message}`);
              }
            }

      - name: Delete old caches
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: caches } = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              // 保留最新的3个缓存，删除其余的
              const cachesToDelete = caches.actions_caches.slice(3);
              
              for (const cache of cachesToDelete) {
                try {
                  await github.rest.actions.deleteActionsCacheById({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cache_id: cache.id,
                  });
                  console.log(`Deleted cache: ${cache.key} (${cache.id})`);
                } catch (error) {
                  console.log(`Failed to delete cache ${cache.id}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Failed to list caches: ${error.message}`);
            }